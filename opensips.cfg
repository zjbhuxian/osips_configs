# 被叫配置
# OpenSIPS loadbalancer script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Load Balancer" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4
# define by jiajunwei at 2019/08/03
#cfg_line
#chroot="/usr/local/opensips"
open_files_limit=10000
query_buffer_size=5
query_flush_time=10

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no

#listen=udp:192.168.20.91:5060 as 5.2.162.97:5060	# CUSTOMIZE ME 被叫
listen=udp:192.168.20.83:5060    # LVS HEALTH CHECK
listen=udp:192.168.20.91:5060 


####### Modules Section ########

#set module path
mpath="/usr/local/opensips/lib64/opensips/modules/"

#>>>>> My Modules start <<<<<
loadmodule "db_cache.so" #for store/fetch information
modparam("db_cache", "db_file", "/usr/local/opensips/etc/opensips/CallDB")
#modparam("db_cache", "db_url", "mysql://opensips:opensipsrw@192.168.20.92/ctsi_stat")
#modparam("db_cache", "sip_table", "sip_info")
#modparam("db_cache", "callid_table", "callid_info")


#loadmodule "trace_sip.so" #for trace log by sign_number
#modparam("trace_sip", "config_file", "/usr/local/opensips/etc/opensips/trace_sip.cfg")

#loadmodule "db_business_msg.so"
#modparam("db_business_msg", "host", "192.168.20.92")
#modparam("db_business_msg", "user", "opensips")
#modparam("db_business_msg", "passwd", "opensipsrw")
#modparam("db_business_msg", "dbname", "ctsi_stat")
#modparam("db_business_msg", "port", 3306) 
#>>>>> My Modules end <<<<<

#>>>>> 内置标准模块 <<<<<

### regex module ###

loadmodule "regex.so"
# 包含正则表达式组的文本文件。必须设置它才能启用组匹配功能
modparam("regex", "file", "/usr/local/opensips/etc/opensips/regex_groups_for_redirect")

# 文本文件中正则表达式组的最大数目
modparam("regex", "max_groups",20)

#文本文件中组的最大内容大小 
modparam("regex", "group_max_size", 8192)

# 如果设置了此选项，则匹配将不区分大小写
modparam("regex", "pcre_caseless", 0)

# 默认情况下，PCRE将字符串视为由单行字符组成（即使它实际上包含换行符）
modparam("regex", "pcre_multiline", 0)

# 如果设置了此选项，则模式中的点元字符将匹配所有字符，包括那些表示换行符的字符 
modparam("regex", "pcre_dotall", 0)

# 如果设置了此选项，则模式中的空白数据字符将被完全忽略，除非进行转义或在字符类内部
modparam("regex", "pcre_extended", 0)

### textops module ###
loadmodule "textops.so"

### uac module <uac_replace_from> ####
loadmodule "uac.so"
modparam("uac", "restore_mode", "manual")

#### HTTPD module
#loadmodule "httpd.so"
#modparam("httpd", "port", 8888)

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
	"mysql://opensips:opensipsrw@192.168.20.92/opensips") # CUSTOMIZE ME

#### DISPATCHER module
#loadmodule "dispatcher.so"
#modparam("dispatcher", "db_url",
#	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
#modparam("dispatcher", "ds_ping_method", "OPTIONS")
#modparam("dispatcher", "ds_probing_mode", 0)

#modparam("dispatcher", "ds_ping_interval", 30)

#### dialog Module
loadmodule "dialog.so"
modparam("dialog", "db_mode", 1)
modparam("dialog", "db_url", "mysql://opensips:opensipsrw@192.168.20.92/opensips")

### Load Balance Module
loadmodule "load_balancer.so"
modparam("load_balancer","db_url","mysql://opensips:opensipsrw@192.168.20.92/opensips")
modparam("load_balancer","db_table","load_balancer")
modparam("load_balancer","probing_interval",30)
modparam("load_balancer","probing_method","OPTIONS")
modparam("load_balancer","probing_from","sip:osips@192.168.20.83:5060")
modparam("load_balancer","probing_reply_codes","404,200")
#modparam("load_balancer","probing_verbose",1)
#modparam("load_balancer","initial_freeswitch_load",200)


####  MI_HTTP module
#loadmodule "mi_http.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so" 
#loadmodule "proto_tls.so"

### TLS
#loadmodule "tls_mgm.so"
#modparam("tls_mgm","verify_cert", "1")
#modparam("tls_mgm","require_cert", "0")
#modparam("tls_mgm","tls_method", "TLSv1")
#modparam("tls_mgm","certificate", "/usr/local/etc/opensips/tls/user/user-cert.pem")
#modparam("tls_mgm","private_key", "/usr/local/etc/opensips/tls/user/user-privkey.pem")
#modparam("tls_mgm","ca_list", "/usr/local/etc/opensips/tls/user/user-calist.pem")

#loadmodule "sipcapture.so"
#modparam("sipcapture", "db_url", "mysql://opensips:opensipsrw@192.168.20.92/opensips")
#modparam("sipcapture", "table_name", "sip_capture")
#modparam("sipcapture", "capture_on", 1)
#modparam("sipcapture", "raw_moni_capture_on", 1)
#modparam("sipcapture", "raw_socket_listen", "10.0.0.0:5060")
#modparam("sipcapture", "raw_interface", "ens160")

####### Routing Logic ########


# main request routing logic

route{

	if (!mf_process_maxfwd_header("10")) {
		send_reply("483","Too Many Hops");
		exit;
	}

	#zhou++ >>>>>>
	if(is_method("OPTIONS")){
		send_reply("200", "ok");
		exit;	
	}
	$var(ast_ip)="10.140.140.134";
	$var(local_ip)="192.168.20.91";
	$var(ast_port)="5060";
	
	#zhou++ >>>>>>
	#sip_capture();
	#zhou++ <<<<<<

	if(is_method("INVITE") || is_method("NOTIFY") || !has_totag()){
		xlog("@@@@@@@@@@@@@@@@@@ Message body [$mb] come from [$si:$sp]\n");
		$var(rU_new)=$rU;
		$var(fU_new)=$fU;
		$var(tU_new)=$tU;

		## 检查资源类型并保存到数组中
		xlog("INFO:load_balancer:mylog: calling number(fU) = [$fU],called number(rU) = [$rU]\n");
		xlog("INFO:load_balancer:mylog: split-flow before lb_res=$avp(lb_res),lb_grp=$var(lb_grp)");

		# 引流开关:redirect_flag ,此变量的值与pcre_match_group[6]的正则匹配，按签约号引流;否则按非签约号引流,默认按非签约号引流
		$var(redirect_flag)="0";
		$var(redirect_user)="$fU";
		if(pcre_match_group("$var(redirect_flag)", "6")){
			$var(redirect_user)=$rU;	
		}else{
			$var(redirect_user)=$fU;	
		}

		xlog("INFO:load_balancer:mylog: Redirect by User [$var(redirect_user)]\n");
		if(pcre_match_group("$var(redirect_user)", "0")){
			# 验证环境 group=0 单向隐号
			$avp(lb_res) = "calls";
			$var(lb_grp) = 0;
		}else if(pcre_match_group("$var(redirect_user)", "1") ){
			# 验证环境 group=1 拨打验证
			$avp(lb_res) = "calls";
			$var(lb_grp) = 1;
		}else if(pcre_match_group("$var(redirect_user)", "2") || $var(redirect_user)=~"^yanzheng"){
			# 验证环境 group=2 核心业务
			$avp(lb_res) = "calls";
			$var(lb_grp) = 2;
		}else if(pcre_match_group("$var(redirect_user)", "3") ){
			# 生产环境 group=3 单向隐号
			$avp(lb_res) = "calls";
			$var(lb_grp) = 3;
		}else if(pcre_match_group("$var(redirect_user)", "4") ){
			# 生产环境 group=4 拨打验证
			$avp(lb_res) = "calls";
			$var(lb_grp) = 4;
		}else if(pcre_match_group("$var(redirect_user)", "5") || $var(redirect_user)=~"^[\0-9]+.*$"){
			# 生产环境 group=5 核心业务
			$avp(lb_res) = "calls";
			$var(lb_grp) = 5;
		}else{
			send_reply("404", "Unknown User...");
			exit;
		}

	 
		## 打印命中的分组及资源类型 
		xlog("INFO:load_balancer:mylog: split-flow after lb_res=$avp(lb_res),lb_grp=$var(lb_grp)");

		## inbound from IMS（平台以外的源主动发起的请求）
		## group=100 包含所有平台内部的asterisk
		if(!lb_is_destination("$si","$sp","100")) {      
			if(is_method("INVITE")){
				$var(r_srcip)=$si+":"+$sp;
				$var(r_pani)="";
				$var(r_route)="";
				$var(r_sdp)="";
				$var(r_other)="";
				# Store ruser to db
				if($rU != NULL && $rU != ""){
					xlog("@@@@@@@@@@@@@@@@ Will store Request User [$rU]...\n");
					store_ruser("$ci", "0", "$rU");
				}else{
					xlog("@@@@@@@@@@@@@@@@ Request User is NULL.\n");
				}

				# Store pani to db
				if(is_present_hf("P-Access-Network-Info")){
					$var(r_pani)=$(hdr(P-Access-Network-Info));
					store_pani("$ci", "0", "$var(r_pani)");
				}

				# Add to db
				append_hf("X-SRC-CALL-ID: $ci\r\n"); #store the incoming CALL-ID
				append_hf("X-RECORD-SRCDST: $si:$sp\r\n");
				append_hf("X-RECORD-SRCIP: $var(local_ip)\r\n");

				# 负载均衡调用
				if(lb_start_or_next("$var(lb_grp)","$avp(lb_res)")) {
					xlog("INFO:load_balancer:mylog: from $si:$sp call-id:$ci sending call to $du\n");
				}else {
					xlog("ERROR:load_balancer:mylog: from $si:$sp call-id:$ci send call to realserver is failed\n");
					send_reply("500","Service full");
					exit;
				}

				#update ast_ip:ast_port
				$var(tmp_du) =$du;
				$var(ast_ip_port)=$(var(tmp_du){s.substr, 4, 0});
				xlog("L_INFO", "@@@@@@@@@@@@@@@@ got ast_ip_port = [$var(ast_ip_port)] from load_balancer\n");
				$var(ast_ip) = $(var(ast_ip_port){s.select,0,:});
				xlog("@@@@@@@@@@@ New ast_ip = [$var(ast_ip)]\n");

				# update dest-uri
				$du="sip:"+$var(ast_ip)+":"+$var(ast_port);
				xlog("L_INFO", "@@@@@@@@@@@@@@@@ du = [$du]\n");

				# save src dest
				$var(srcipp)=$si:$sp;
				#store_srcip("$ci", "0", "$var(srcipp)");
					
				# save src from
				$var(r_from)=$fu;
				$var(r_from)=$(var(r_from){s.encode.hexa});
				store_from("$ci", "0", "$var(r_from)");

				# save src to
				$var(r_to)=$tu;
				$var(r_to)=$(var(r_to){s.encode.hexa});
				store_to("$ci", "0", "$var(r_to)");
			
				#save pai
				if(is_present_hf("P-Asserted-Identity")){
					$var(r_pai)=$(hdr(P-Asserted-Identity));
					$var(r_pai)=$(var(r_pai){s.encode.hexa});
					store_pai("$ci", "0", "$var(r_pai)");
				}

				# save sdp-body
				if(has_body("application/sdp")){
					$var(r_sdp)=$(rb(application/sdp));
					$var(r_sdp)=$(var(r_sdp){s.encode.hexa});
					store_sdp("$ci", "0", "$var(r_sdp)"); 
				}

				#save route
				if(is_present_hf("Route")){
					$var(r_route)="";
					$var(r_cnt)=0;
					for($var(r_index) in $(hdr(Route)[*])){
						$var(r_cnt)=$var(r_cnt)+1;
						$var(r_route_idx)="";
						$var(r_route_tmp)="";
						$var(i)=0;
						$var(r_index_idx)=$(var(r_index){s.select,$var(i),,});
						while($(var(r_index_idx){s.len}) > 0){
							#xlog("-----------------> r_index_idx = [$var(r_index_idx)]\n");
							if($var(r_index_idx)!~"^<sip:nlkfSCPajc.[z|b]j.bj.bj.ims.mnc011.mcc460.*>$"){
								xlog("--------------> NOTNOT local domain route...\n");
								if($(var(r_route_tmp){s.len}) == 0)
									$var(r_route_tmp)=$var(r_index_idx);
								else
									$var(r_route_tmp)=$var(r_route_tmp)+","+$var(r_index_idx);
							}else{
								#xlog("--------------> ISISIS local domain route...\n");
							}
							$var(i)=$var(i)+1;
							$var(r_index_idx)=$(var(r_index){s.select,$var(i),,});
						}
						$var(r_route)=$(var(r_route_tmp){s.encode.hexa})+":"+$var(r_route);
						#xlog("-------------------> invite with route [$var(r_index)]\n");
					}
					$var(r_route)=$var(r_route)+$var(r_cnt);
					#xlog("-------------------> invite with [$var(r_cnt)] routes\n");
					store_route("$ci", "0", "$var(r_route)");
				}

				#store_sip_info("$var(r_srcip)", "$var(r_route)", "$var(r_sdp)", "$var(r_pani)", "$var(r_other)");
				#$var(r_route_tmp)="";
				#$var(r_pai_tmp)="";
				#$var(r_ruser_tmp)="";
				#$var(r_from_tmp)="";
				#$var(r_to_tmp)="";
				#$var(r_sdp_tmp)="";
				#$var(r_pani_tmp)="";
				#$var(r_other_tmp)="";
				#fetch_route("$ci", "INVITE", "$var(r_route_tmp)");
				#fetch_pai("$ci", "INVITE", "$var(r_pai_tmp)");
				#fetch_ruser("$ci", "INVITE", "$var(r_ruser_tmp)");
				#fetch_from("$ci", "INVITE", "$var(r_from_tmp)");
				#fetch_to("$ci", "INVITE", "$var(r_to_tmp)");
				#fetch_pani("$ci", "INVITE", "$var(r_pani_tmp)");
				#fetch_other("$ci", "INVITE", "$var(r_other_tmp)");
				#xlog("L_DBG", ">>>db_cache:fetched route = [$(var(r_route_tmp){s.decode.hexa}))]\n");
				#xlog("L_DBG", ">>>db_cache:fetched pai = [$var(r_pai_tmp)]\n");
				#xlog("L_DBG", ">>>db_cache:fetched ruser = [$var(r_ruser_tmp)]\n");
				#xlog("L_DBG", ">>>db_cache:fetched from = [$var(r_from_tmp)]\n");
				#xlog("L_DBG", ">>>db_cache:fetched to = [$var(r_to_tmp)]\n");
				#xlog("L_DBG", ">>>db_cache:fetched pani = [$var(r_pani_tmp)]\n");
				#xlog("L_DBG", ">>>db_cache:fetched other = [$var(r_other_tmp)]\n");
			}

			# fix request-uri
			if(is_method("INVITE")){
				xlog("@@@@@@@@@@@@@@@ Will fix request-uri...\n");
				if($var(rU_new)=~"^\+86.*"){
					xlog("--------> Request User headered with [+86]\n");
					$var(rU_new)=$(var(rU_new){s.substr,3,0});
					if(!($var(rU_new)=~"^0?1[3456789][0-9]{9}$")){
						xlog("--------> Request User is not mobile-phone number\n");
						$var(rU_new)="0"+$var(rU_new);
					}
					xlog("--------> Fixed Request User [$var(rU_new)] come from outside\n");
				}
				if($ru=~"^tel:.*"){
					xlog("@@@@@@@@@@@@@@@@@@@@ Tel Format[$ru], from [$si:$sp]\n");
				}else if($ru=~"^sip:.*@.*"){
					xlog("@@@@@@@@@@@@@@@@@@@@ Sip Format[$ru], from [$si:$sp]\n");
				}
				$ru="sip:"+$var(rU_new)+"@"+$var(ast_ip)+":"+$var(ast_port);
				xlog("----------------------> New Request-Uri = [$ru] will sent inside\n");

				#trace_sip >>>>>
				#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
				#$var(trace_flag)=0;
				#db_fetch_trace_flag("$var(rU_new)", "$ci", "", "$var(trace_flag)");
				#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
				#if($var(trace_flag) == 1)trace_sip("$mb");
				#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");
			}
			

			# fix from-uri
			$var(changed_fU)=0;
			if($var(fU_new)=~"^\+86.*"){
				$var(changed_fU)=1;
				$var(fU_new)=$(var(fU_new){s.substr,3,0});
				if(!($var(fU_new)=~"^0?1[3456789][0-9]{9}$")){
					#xlog("--------> From User is not mobile-phone number\n");
					$var(fU_new)="0"+$var(fU_new);
				}
				#xlog("--------> Fixed From User [$var(fU_new)]\n");
			}
			if($fu=~"^tel:.*"){
				$var(new_from)="sip:"+$var(fU_new)+"@"+$var(ast_ip);
				uac_replace_from("", "$var(new_from)");
			}else if($var(changed_fU)==1){
				$var(new_from)="sip:"+$var(fU_new)+"@"+$var(ast_ip);
				uac_replace_from("", "$var(new_from)");
				#xlog("------------------------> new_from:[$var(new_from)].\n");
			}

			# fix to-uri
			$var(changed_tU)=0;
			if($var(tU_new)=~"^\+86.*"){
				$var(changed_tU)=1;
				$var(tU_new)=$(var(tU_new){s.substr,3,0});
				if(!($var(tU_new)=~"^0?1[3456789][0-9]{9}$")){
					#xlog("--------> To User is not mobile-phone number\n");
					$var(tU_new)="0"+$var(tU_new);
				}
				#xlog("--------> Fixed To User [$var(tU_new)]\n");
			}
			if($tu=~"^tel:.*"){
				$var(new_to)="sip:"+$var(tU_new)+"@"+$var(ast_ip);
				uac_replace_to("", "$var(new_to)");
			}else if($var(changed_tU)==1){
				$var(new_to)="sip:"+$var(tU_new)+"@"+$var(ast_ip);
				uac_replace_to("", "$var(new_to)");
				#xlog("------------------------> new_to:[$var(new_to)].\n");
			}

			# fix History-Info
			$var(historyInfo)="";
			if(is_present_hf("History-Info")){
				xlog("L_DBG", ">>>>>History-Info(org) = [$(hdr(History-Info))]\n");
				$var(historyInfo)=$(hdr(History-Info));
				$var(reg)="/\+86//gi";
				$var(historyInfo_fixed)=$(var(historyInfo){re.subst, $var(reg)});
				xlog("L_DBG", ">>>>>History-Info(fixed) = [$var(historyInfo_fixed)]\n");
				remove_hf("History-Info");
				append_hf("History-Info: $var(historyInfo_fixed)\r\n");
			}else{
				xlog("L_DBG", ">>>>>Has no History-Info.\n");
			}
		}else{	#incoming from inside(asterisk)
			xlog("@@@@@@@@@@@@@@@@@@@@@@  Come from Inside[$si:$sp]\n");

			#update callid to sqlite
			if(is_method("INVITE")){
				#delete maxptime
				if(subst_body("/^a=maxptime.*[\n]?//gi")){
					xlog("@@@@@@@@@@@@@@@@@@@@@Removed media attribute maxptime line.\n");
				}else{
					xlog("@@@@@@@@@@@@@@@@@@@@@No maxptime or Failed to remove maxptime line.\n");
				}

				#update du
				if(is_present_hf("X-RECORD-SRCDST")){
					$du = "sip:"+$(hdr(X-RECORD-SRCDST));
					xlog("@@@@@@@@@@@@@@@@@@@@@@@@ Update the destination [$du]\n");
					store_destip("$ci", "0", "$(hdr(X-RECORD-SRCDST))");
					remove_hf("X-RECORD-SRCDST");
				}

				$var(bypass)=0; #default value: bypass is 0
				if(is_present_hf("X-SRC-BYPASS")){
					$var(bypass)=$(hdr(X-SRC-BYPASS){s.int});
					remove_hf("X-SRC-BYPASS");
				}
				xlog("@@@@@@@@@@@@@@@@@@@@@@  bypass = [$var(bypass)]\n");
				#store_bypass("$ci", "0", "$var(bypass)");

				$var(service_type)="";
				if(is_present_hf("X-SRC-SERVICE-TYPE")){
					$var(service_type)=$hdr(X-SRC-SERVICE-TYPE);
					remove_hf("X-SRC-SERVICE-TYPE");
				}
				xlog("@@@@@@@@@@@@@@@@@@@@@@ service_type = [$var(service_type)]\n");
					
				$var(src_callid)="";
				if(is_present_hf("X-SRC-CALL-ID")){
					$var(src_callid) = $(hdr(X-SRC-CALL-ID));
					xlog("@@@@@@@@@@@@@@@@@@@@@ src_callid = [$var(src_callid)]\n");
					store_callid("$var(src_callid)", "$ci");
					remove_hf("X-SRC-CALL-ID");
				}

				#store_bypass("$var(src_callid)", "0", "$var(bypass)");

				$var(incallid)=$var(src_callid);
				#fetch_callid("$ci", "0", "$var(incallid)");
				#xlog("fetched src_callid = $var(incallid)\n");
				#trace_sip >>>>>
				#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
				#$var(trace_flag)=0;
				#db_fetch_trace_flag("", "$var(src_callid)", "$ci", "$var(trace_flag)");
				#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
				#if($var(trace_flag) == 1)trace_sip("$mb");
				#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");

				$var(insdp) = "";
				if($var(bypass)!=0){
					#fetch_sdp("$var(incallid)", "INVITE", "$var(insdp)");
					xlog("@@@@@@@@@@@@@@@@@@@@@ fetched sdp = $var(insdp)\n");

					if($(var(insdp){s.len}) > 0){
						remove_body_part("application/sdp");
						$var(insdp)=$(var(insdp){s.triml});
						$var(insdp)=$(var(insdp){s.decode.hexa});
						add_body_part("$var(insdp)", "application/sdp");
					}
				}

				#erase 100rel from supported
				#if($var(service_type)=="yly"){
				if(is_method("INVITE")){
					if(is_present_hf("Require")){
						if(subst('/^(Require:.*)100rel\s*,(.*)$/\1\2/i')){
							xlog("L_INFO", "@@@@@@@@@@@@@@@@@@@@ Removed 100rel Require (1)\n");
						}else if(subst('/^(Require:.*),\s*100rel(.*)$/\1\2/i')){
							xlog("L_INFO", "@@@@@@@@@@@@@@@@@@@@ Removed 100rel Require (2)\n");
						}else if(search('^Require:.*100rel.*$')){
							remove_hf("Require");
							xlog("L_INFO", "@@@@@@@@@@@@@@@@@@@@ Removed 100rel Require (3)\n");
						}else{
							xlog("L_INFO", "@@@@@@@@@ No matched 100rel...\n");
						}
					}
				}

				# resume route
				if($var(service_type)=="yly"){
					$var(inroute)="";
					#fetch_route("$var(incallid)", "INVITE", "$var(inroute)");
					fetch_route("$var(incallid)", "0", "$var(inroute)");
					$var(inroute_cnt)=$(var(inroute){s.select,-1,:});
					$var(inroute_cnt)=$(var(inroute_cnt){s.int});
					if($var(inroute_cnt) > 0){
						while($var(inroute_cnt) > 0){
							$var(inroute_cnt)=$var(inroute_cnt)-1;
							$var(inroute_index)=$(var(inroute){s.select,$var(inroute_cnt),:});
							$var(inroute_index)=$(var(inroute_index){s.decode.hexa});
							xlog("@@@@@@@@@@@@@@@@@@@@@@@@ fetched route = $var(inroute_index)\n");
							append_hf("Route: $var(inroute_index)\r\n");
						}
					}
				}

				# resume pani
				$var(r_pani) = "";
				#fetch_pani("$var(incallid)", "INVITE", "$var(r_pani)");
				fetch_pani("$var(incallid)", "0", "$var(r_pani)");
				xlog("Fetched pani $var(r_pani)\n");
				if(is_present_hf("P-Access-Network-Info")){
					remove_hf("P-Access-Network-Info");
				}
				append_hf("P-Access-Network-Info: $var(r_pani)\r\n");

				# resume Request-Uri
				if($var(service_type)=="yly"){
					# Resume ruser
					$var(r_user) = "";
					#fetch_ruser("$var(incallid)", "INVITE", "$var(r_user)");
					fetch_ruser("$var(incallid)", "0", "$var(r_user)");
					# 办公区新增配置
					$var(rU_new)=$var(r_user);
					##
					if($var(r_user) != ""){
						$ru = "tel:"+$var(r_user);
					}else{
						$var(rU_new)=$rU;#Just resume
						xlog("@@@@@@@@@@@@@@@@@ Error: Failed to fetch ruser.\n");
					}
				}else{
					$var(changed_rU)=1;
					if(!($var(rU_new)=~"^\+86.*")){
						$var(changed_rU)=1;
						xlog("--------> Request User headered with [+86]\n");
						if(!($var(rU_new)=~"^0?1[3456789][0-9]{9}$")){
							xlog("--------> Request User is a telephone number\n");
							if($var(rU_new)=~"^0[1-9]*"){
								$var(rU_new)=$(var(rU_new){s.substr,1,0});
								xlog("--------> Request User is a telephone number with 0 header\n");
							}
						}
						$var(rU_new)="+86"+$var(rU_new);
						xlog("--------> Fixed Request User [$var(rU_new)]\n");
					}
					if($ru=~"^tel:.*"){
						if($var(changed_rU)==1){
							$ru="tel:"+$var(rU_new);
						}
						#xlog("----------------------> Tel Format[$ru], from [$si:$sp]\n");
					}else if($ru=~"^sip:.*@.*"){
						#xlog("----------------------> Sip Format[$ru], from [$si:$sp]\n");
						$ru="tel:"+$var(rU_new);	
						xlog("----------------------> New Request-Uri = [$ru] will sent outside\n");
					}
				}
				# 办公区送出去sip格式

				$var(tmp_du)=$du;
				$var(ast_ip_port)=$(var(tmp_du){s.substr,4,0});
				$var(ast_ip)=$(var(ast_ip_port){s.select,0,:});
				$ru = "sip:"+$var(rU_new)+"@"+$var(ast_ip)+":"+"5060";
				xlog("----------------------> New Request-Uri = [$ru]\n");
			}
			
			
			if($var(service_type)=="yly"){
				# resume From-Uri
				$var(src_from)="";
				#fetch_from("$var(incallid)", "INVITE", "$var(src_from)");
				fetch_from("$var(incallid)", "0", "$var(src_from)");
				$var(src_from)=$(var(src_from){s.decode.hexa});
				xlog("@@@@@@@@@@@@@@@@@@@@@@@@ fetched from = [$var(src_from)]\n");
				uac_replace_from("", "$var(src_from)");

				# resume To-Uri
				$var(src_to)="";
				#fetch_to("$var(incallid)", "INVITE", "$var(src_to)");
				fetch_to("$var(incallid)", "0", "$var(src_to)");
				$var(src_to)=$(var(src_to){s.decode.hexa});
				xlog("@@@@@@@@@@@@@@@@@@@@@@@@ fetched to = [$var(src_to)]\n");
				uac_replace_to("", "$var(src_to)");

				#resume Pai
				$var(src_pai)="";
				#fetch_pai("$var(incallid)", "INVITE", "$var(src_pai)");
				fetch_pai("$var(incallid)", "0", "$var(src_pai)");
				$var(src_pai)=$(var(src_pai){s.decode.hexa});
				xlog("@@@@@@@@@@@@@@@@@@@@@@@@ fetched pai = [$var(src_pai)]\n");
				append_hf("P-Asserted-Identity: $var(src_pai)\r\n");
			}else{
				# Fix From-Uri
				$var(fU_changed)=0;
				if(!($var(fU_new)=~"^\+86.*")){
					#xlog("--------> From User header with no [+86]\n");
					if(!($var(fU_new)=~"^0?1[3456789][0-9]{9}$")){
						#xlog("--------> From User is a telephone number\n");
						if($var(fU_new)=~"^0.*"){
							$var(fU_new)=$(var(fU_new){s.substr,1,0});
							#xlog("--------> From User is a telephone number with 0 header\n");
						}
					}
					$var(fU_new)="+86"+$var(fU_new);
					xlog("--------> Fixed From User [$var(fU_new)]\n");
					#$var(fu_new)="sip:"+$var(fU_new)+"@"+$(fu{uri.host});
					#uac_replace_from("", "$var(fu_new)");
				}

				if(is_present_hf("X-FROM-DOMAIN")){
					$var(x_from_domain)=$(hdr(X-FROM-DOMAIN));
					$var(x_from_domain_len) = $(var(x_from_domain){s.len});
					xlog("@@@@@@@@@@@ X-FROM-DOMAIN = [$var(x_from_domain)] with length [$var(x_from_domain_len)]\n");
					if($var(x_from_domain_len) > 0){
						$var(fu_new) = "sip:"+$var(fU_new)+"@"+$(hdr(X-FROM-DOMAIN));
						uac_replace_from("", "$var(fu_new)");
					}else{
						if($var(fU_changed)==1){
							xlog("-------> hdr [X-FROM-DOMAIN] has nothing...\n");
							$var(fu_new)="sip:"+$var(fU_new)+"@"+$(fu{uri.host});
							uac_replace_from("", "$var(fu_new)");
						}
					}
					remove_hf("X-FROM-DOMAIN");
				}else if($var(fU_changed)==1){
					$var(fu_new)="sip:"+$var(fU_new)+"@"+$var(fu{uri.host});
					uac_replace_from("", "$var(fu_new)");
				}

				if(is_present_hf("X-SRC-LOG-TRACER")){
					remove_hf("X-SRC-LOG-TRACER");
				}

				if(is_method("INVITE")){
					# Add PAI
					append_hf("P-Asserted-Identity: $var(fu_new)\r\n");
				}
				
				
				
				# Fix To-Uri
				if(!($var(tU_new)=~"^\+86.*")){
					#xlog("--------> To User header with no [+86]\n");
					if(!($var(tU_new)=~"^0?1[3456789][0-9]{9}$")){
						#xlog("--------> To User is a telephone number\n");
						if($var(tU_new)=~"^0.*"){
							$var(tU_new)=$(var(tU_new){s.substr,1,0});
							#xlog("--------> To User is a telephone number with 0 header\n");
						}
					}
					$var(tU_new)="+86"+$var(tU_new);
					xlog("--------> Fixed To User [$var(tU_new)]\n");
					$var(tu_new)="sip:"+$var(tU_new)+"@"+$(tu{uri.host});
					uac_replace_to("", "$var(tu_new)");
				}
			}

			# Clear all headers used in inter.
			if(is_present_hf("X-SRC-CALL-ID")){
				remove_hf("X-SRC-CALL-ID");
			}
			if(is_present_hf("X-SRC-BYPASS")){
				remove_hf("X-SRC-BYPASS");
			}
			if(is_present_hf("X-SRC-SERVICE-TYPE")){
				remove_hf("X-SRC-SERVICE-TYPE");
			}
			if(is_present_hf("X-SRC-LOG-TRACER")){
				remove_hf("X-SRC-LOG-TRACER");
			}
			if(is_present_hf("X-RECORD-SRCDST")){
				remove_hf("X-RECORD-SRCDST");
			}
			if(is_present_hf("X-RECORD-SRCIP")){
				remove_hf("X-RECORD-SRCIP");
			}
			if(is_present_hf("X-FROM-DOMAIN")){
				remove_hf("X-FROM-DOMAIN");
			}
		}
	}else{
		if(is_method("BYE")){
			send_reply("200", "ok");
		}
	}

	#if(is_method("OPTIONS")){
	#	send_reply("200", "ok");
	#	exit;	
	#}

	if(is_method("PRACK") || is_method("BYE") || is_method("ACK") || is_method("UPDATE") || is_method("CANCEL")){
		xlog("--@@@@@@@@@@@@@@@@ Message body [$mb] from [$si:$sp]\n");
		$var(fU_new)=$fU;
		$var(tU_new)=$tU;

		#incoming from outside
		if(!lb_is_destination("$si","$sp","100")) {
			if(is_method("PRACK")){
				xlog("@@@@@@@@@@@@@@@@ PRACK from outside ...[$si:$sp]\n");
			}
			$var(outcallid)="";
			#fetch_callid("$ci", "1", "$var(outcallid)");
			fetch_callid("$ci", "$var(outcallid)");
			xlog("fetched outcallid = $var(outcallid)\n");			     
			#trace_sip >>>>>
			#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
			#$var(trace_flag)=0;
			#db_fetch_trace_flag("", "$ci", "", "$var(trace_flag)");
			#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
			#if($var(trace_flag) == 1)trace_sip("$mb");
			#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");

			# fix from-uri
			$var(changed_fU)=0;
			if($var(fU_new)=~"^\+86.*"){
				$var(changed_fU)=1;
				$var(fU_new)=$(var(fU_new){s.substr,3,0});
				if(!($var(fU_new)=~"^0?1[3456789][0-9]{9}$")){
					$var(fU_new)="0"+$var(fU_new);
				}
			}
			if($fu=~"^tel:.*"){
				$var(new_from)="sip:"+$var(fU_new)+"@"+$var(ast_ip);
				uac_replace_from("", "$var(new_from)");
			}else if($var(changed_fU)==1){
				$var(new_from)="sip:"+$var(fU_new)+"@"+$var(ast_ip);
				uac_replace_from("", "$var(new_from)");
			}

			# fix to-uri
			$var(changed_tU)=0;
			if($var(tU_new)=~"^\+86.*"){
				$var(changed_tU)=1;
				$var(tU_new)=$(var(tU_new){s.substr,3,0});
				if(!($var(tU_new)=~"^0?1[3456789][0-9]{9}$")){
					$var(tU_new)="0"+$var(tU_new);
				}
			}
			if($tu=~"^tel:.*"){
				$var(new_to)="sip:"+$var(tU_new)+"@"+$var(ast_ip);
				uac_replace_to("", "$var(new_to)");
			}else if($var(changed_tU)==1){
				$var(new_to)="sip:"+$var(tU_new)+"@"+$var(ast_ip);
				uac_replace_to("", "$var(new_to)");
			}

			
			if(is_method("CANCEL")){
				if($var(bypass) == 0){
					if(is_present_hf("Route")){
						$var(r_route)="";
						$var(r_cnt)=0;
						for($var(r_index) in $(hdr(Route)[*])){
							$var(r_cnt)=$var(r_cnt)+1;
							$var(r_route_idx)="";
							$var(r_route_tmp)="";
							$var(i)=0;
							$var(r_index_idx)=$(var(r_index){s.select,$var(i),,});
							while($(var(r_index_idx){s.len}) > 0){
								if($var(r_index_idx)!~"^<sip:nlkfSCPajc.[z|b]j.bj.bj.ims.mnc011.mcc460.*>$"){
									xlog("--------------> NOTNOT local domain route...\n");
									if($(var(r_route_tmp){s.len}) == 0)
										$var(r_route_tmp)=$var(r_index_idx);
									else
										$var(r_route_tmp)=$var(r_route_tmp)+","+$var(r_index_idx);
								}else{
								}
								$var(i)=$var(i)+1;
								$var(r_index_idx)=$(var(r_index){s.select,$var(i),,});
							}
							$var(r_route)=$(var(r_route_tmp){s.encode.hexa})+":"+$var(r_route);
						}
						$var(r_route)=$var(r_route)+$var(r_cnt);
						store_route("$ci", "1", "$var(r_route)");
						#store_sip_info(,"$var(r_route)",,,);
					}
				}
			}
		}else{
			#trace_sip >>>>>
			#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
			#$var(trace_flag)=0;
			#db_fetch_trace_flag("", "", "$ci", "$var(trace_flag)");
			#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
			#if($var(trace_flag) == 1)trace_sip("$mb");
			#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");
			if(is_method("PRACK")){
				xlog("@@@@@@@@@@@@@@@@ PRACK from asterisk ...[$si:$sp]\n");
			}
			# Resume From-Uri
			if(!($var(fU_new)=~"^\+86.*")){
				if(!($var(fU_new)=~"^0?1[3456789][0-9]{9}$")){
					if($var(fU_new)=~"^0.*"){
						$var(fU_new)=$(var(fU_new){s.substr,1,0});
					}
				}
				$var(fU_new)="+86"+$var(fU_new);
				$var(fu_new)="sip:"+$var(fU_new)+"@"+$(fu{uri.host});
				uac_replace_from("", "$var(fu_new)");
			}
			
			# Resume To-Uri
			if(!($var(tU_new)=~"^\+86.*")){
				if(!($var(tU_new)=~"^0?1[3456789][0-9]{9}$")){
					if($var(tU_new)=~"^0.*"){
						$var(tU_new)=$(var(tU_new){s.substr,1,0});
					}
				}
				$var(tU_new)="+86"+$var(tU_new);
				$var(tu_new)="sip:"+$var(tU_new)+"@"+$(tu{uri.host});
				uac_replace_to("", "$var(tu_new)");
			}

			
		}
		
		if(is_method("PRACK")){
			if(is_present_hf("Route")){
				$var(Route0)=$(hdr(Route));
				xlog("--@@@@@@@@@@@@@@@@ PRACK Route0: [$var(Route0)]...\n");
				if($var(Route0)=~"^<sip:5.2.162.97.*"){
					remove_hf("route"); #no use ....
				}else{
					xlog("!!!!!!!!!!!!!!! PRACK to Other.......!!!!!\n");
				}
			}
		}
	}
	#zhou++ <<<<<<

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request withing a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			# send_reply("404","Not here"); #zhou--
			# exit;
		}
		
		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(RELAY);
		exit;
	}

	#### INITIAL REQUESTS

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	} else if (!is_method("INVITE")) {
		send_reply("405","Method Not Allowed");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply("484","Address Incomplete");
		exit;
	}

	t_check_trans();

	# preloaded route checking
	#if (loose_route()) {
	#	xlog("L_ERR",
	#		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
	#	if (!is_method("ACK"))
	#		send_reply("403","Preload Route denied");
	#	exit;
	#}

	# record routing
	record_route();
	# zhou++ >>>>>>>>
	if (!is_method("REGISTER|MESSAGE")){
		if(!lb_is_destination("$si","$sp","100") ) { #incoming from outside
			# 办公区没有外部地址（cn2）
			# 生产环境有外部地址（cn2）
			#record_route_preset("192.168.20.91", "5.2.162.97"); # 243<->5.2.162.97
			#add_rr_param(";r2=on");
		}else{
			#record_route_preset("5.2.162.97", "192.168.20.91"); # 243<->5.2.162.97
			#add_rr_param(";r2=on");
		}
	}
	# zhou++ <<<<<<<<

	do_accounting("db");
	
	# zhou++ for test >>>>.
	#sip_capture();
	# zhou++ for test <<<<.
	route(RELAY);
}


route[RELAY] {
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}


failure_route[LB_failed] {
  ## skip if call was canceled
	if (t_was_cancelled()) {
		exit;
	}

	xlog("INFO:load_balancer:mylog: LB_failed sip message=[$mb]");

	# 负载失败时只对5xx 6xx 服务器错误以及408请求超时重做负载均衡
	if ( t_check_status("[56][0-9][0-9]") ||
		(t_check_status("408") && t_local_replied("all"))) {
		xlog("INFO:load_balancer:mylog: Abnormal response was received from $du by code $T_reply_code\n");

		# 标记失败的地址不可用
		lb_disable_dst();

		# 重新路由到可用的目标地址
		if(!lb_is_destination("$si","$sp","100") ) {
			if(lb_start_or_next("$var(lb_grp)","$avp(lb_res)")) {
				xlog("INFO:load_balancer:mylog: from $si:$sp call-id:$ci re-routing call to $du\n");
			}else {
				xlog("ERROR:load_balancer:mylog: from $si:$sp call-id:$ci re-couting call to realserver is failed\n");
				send_reply("500","Service full");
				exit;
			}
		}
	}	
}

#zhou++ >>>>>>>>>>
onreply_route[handle_nat] {
	xlog("@@@@@@@@@@@@@@@@ -------->incoming reply [$rs] [$mb] from [$si:$sp]\n");
	if(t_check_status("(180)|(183)")){
		if(t_check_status("180")){
			xlog("@@@@@@@@@@@@@@ -------> 180... from [$si:$sp].\n");
		}else{
			xlog("@@@@@@@@@@@@@@ -------> 183... from [$si:$sp].\n");
		}

		#incoming from inside
		if(lb_is_destination("$si","$sp","100") ) {
			#trace_sip >>>>>
			#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
			#$var(trace_flag)=0;
			#db_fetch_trace_flag("", "$ci", "", "$var(trace_flag)");
			#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
			#if($var(trace_flag) == 1)trace_sip("$mb");
			#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");
		}else{
			#trace_sip >>>>>
			#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
			#$var(trace_flag)=0;
			#db_fetch_trace_flag("", "", "$ci", "$var(trace_flag)");
			#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
			#if($var(trace_flag) == 1)trace_sip("$mb");
			#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");
		}
	}
	if(t_check_status("200")){
		xlog("@@@@@@@@@@@@@@ -------> 200... from [$si:$sp].\n");
		if(lb_is_destination("$si","$sp","100") ){
			#trace_sip >>>>>
			#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
			#$var(trace_flag)=0;
			#db_fetch_trace_flag("", "$ci", "", "$var(trace_flag)");
			#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
			#if($var(trace_flag) == 1)trace_sip("$mb");
			#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");
			#xlog("@@@@@@@@@@@@@@ -------> 200 OK from Asterisk.\n");
		}else{
			#trace_sip >>>>>
			#xlog("@@@@@@@@@@ Trace_sip >>>>>>>>>>>");
			#$var(trace_flag)=0;
			#db_fetch_trace_flag("", "", "$ci", "$var(trace_flag)");
			#xlog("@@@@@@@@@@ fetched trace_flag = $var(trace_flag)");
			#if($var(trace_flag) == 1)trace_sip("$mb");
			#xlog("@@@@@@@@@@ Trace_sip <<<<<<<<<<<");
		}
	}
	if(lb_is_destination("$si","$sp","100") ) {
		#delete maxptime
		if(subst_body("/^a=maxptime.*[\n]?//i")){
			xlog("@@@@@@@@@@@@@@@@@@@@@Removed media attribute maxptime line.\n");
		}else{
			xlog("@@@@@@@@@@@@@@@@@@@@@No maxptime or Failed to remove maxptime line.\n");
		}
	}
}
#zhou++ <<<<<<<<<<
